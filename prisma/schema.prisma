generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["relationJoins"]
}

datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.db"
}

model track {
  id              Int     @id @default(autoincrement())
  filename        String  
  folder          String  
  name            String?
  artist          String?
  length          Float
  bpm             Float?
  genres          genre[]  
  tags            tag[]
  album           String?
  label           String?
  key             String?
  dateAdded       DateTime
  rating          Int?
  comment         String?
  bitrate         Int
  playlistTracks  playlist_track[] 
}

model genre{
  id        Int     @id @default(autoincrement())
  name      String  @unique
  color     String  @default("#ffffff")
  tracks    track[]
  //tags      tag[]

  filter_row filter_row[] @relation("FilterRowGenres")
}

model tag{
  id      Int       @id @default(autoincrement())
  name    String
  typeId  Int
  tracks  track[]
  type    tag_type  @relation(fields: [typeId], references: [id])

  filter_row filter_row[] @relation("FilterRowTags")
}

model tag_type{
  id      Int       @id @default(autoincrement())
  name    String    @unique
  color   String    @default("#ffffff")
  tags    tag[]
}

model playlist {
  id                Int            @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  tracks            playlist_track[] 
  filterData        filter_data? @relation(fields: [filterId], references: [id])
  filterId          Int? 
}

model playlist_track {
  id         Int      @id @default(autoincrement())
  playlist   playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId Int
  track      track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId    Int
  order      Int     

  @@unique([playlistId, order]) // Ensure that the order is unique within a playlist
}

model filter_row {
  id               Int       @id @default(autoincrement())
  selectedKey      String
  selectedComparator String
  inputValue       String?
  inputValueMin    String?
  inputValueMax    String?
  filterData       filter_data @relation(fields: [filterId], references: [id], onDelete: Cascade)
  filterId         Int @map("filterId")
  selectedTags     tag[]    @relation("FilterRowTags")
  selectedGenres   genre[]  @relation("FilterRowGenres")
}

model filter_data {
  id               Int           @id @default(autoincrement())
  allConditions    Boolean
  filterRows       filter_row[]

  playlist playlist[]
	@@map("filter_data")
}